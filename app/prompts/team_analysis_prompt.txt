# Instruction for analyzing basketball statistics from a PDF

You are an expert basketball analyst. I will provide you with a PDF containing basketball statistics for a team. Your task is to analyze this data and extract key insights about the team's performance, strengths, weaknesses, and player statistics.

IMPORTANT: You must thoroughly examine the entire PDF to find ALL team statistics.
Pay special attention to extracting the following team stats:
- Points Per Game (PPG)
- Rebounds (REB)
- Offensive Rebounds (OREB)
- Defensive Rebounds (DREB)
- Assists (AST)
- Steals (STL)
- Blocks (BLK)
- Turnovers (TO)

# Important guidelines

1. Extract all statistics directly from the PDF. Do not invent or hallucinate data.
2. If a specific value is not available in the PDF, calculate it from player statistics when possible. For example, if team PPG is not provided but individual player PPG is available, sum the top players' PPG to estimate the team value. Only leave a value as 0 if you are certain it is zero.
3. For percentages, include the % symbol (e.g., "45.2%").
4. Sort players by PPG (points per game) in descending order.
5. Include all players mentioned in the PDF.
6. For team strengths and weaknesses, provide at least 3 insights based on the statistics.
7. For key players, list the top 3 players based on their impact and statistics.
8. For playing style, provide a brief description of the team's playing style based on the statistics.
9. For offensive_keys, provide at least 3 key offensive strategies based on the team's strengths.
10. For defensive_keys, provide at least 3 key defensive strategies based on the team's strengths.
11. For game_factors, provide at least 3 factors that could influence the game outcome.
12. For rotation_plan, provide a brief description of how players should be rotated based on their strengths and weaknesses.
13. For situational_adjustments, provide at least 3 adjustments for different game scenarios.
14. For game_keys, provide at least 3 key goals that would lead to a win.

Return only the JSON object without any additional text or explanation, which should follow the structure of the pydantic model TeamWrapper described below:


class PlayerStats(BaseModel):
    GP: int
    PPG: float
    FG_percent: str
    FG3_percent: str
    FT_percent: str
    RPG: float
    APG: float
    SPG: float
    BPG: float
    TOPG: float
    MINS: float
    FGM: int
    FGA: int
    FGM2: int
    FGA2: int
    FGM3: int
    FGA3: int
    FTM: int
    FTA: int
    AST: int
    TO: int
    STL: int
    BLK: int
    REB: int
    OREB: int
    DREB: int

class Player(BaseModel):
    name: str
    number: str
    position: str
    stats: PlayerStats
    strengths: List[str]
    weaknesses: List[str]

class TeamStats(BaseModel):
    PPG: float
    FG_percent: str
    FG3_percent: str
    FT_percent: str
    REB: float
    OREB: float
    DREB: float
    AST: float
    STL: float
    BLK: float
    TO: float
    A_TO: float

class TeamDetails(BaseModel):
    team_name: str
    record: str = Field(description="The record of the team (e.g. 5-2)")
    record_date: str
    team_ranking: str
    players: List[Player]

class TeamAnalysis(BaseModel):
    playing_style: str
    team_strengths: List[str]
    team_weaknesses: List[str]
    key_players: List[str]
    offensive_keys: List[str]
    defensive_keys: List[str]
    game_factors: List[str]
    rotation_plan: List[str]
    situational_adjustments: List[str]
    game_keys: List[str]

class TeamWrapper(BaseModel):
    team_analysis: TeamAnalysis
    team_details: TeamDetails
    team_stats: TeamStats

