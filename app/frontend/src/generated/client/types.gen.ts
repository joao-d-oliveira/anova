// This file is auto-generated by @hey-api/openapi-ts

export type BodyUploadFilesApiTaskUploadPost = {
    team_uuid?: string | null;
    team_files?: (Blob | File) | null;
    team_name?: string | null;
    opponent_files: Blob | File;
    opponent_name: string | null;
    use_local_simulation?: boolean | null;
};

export type ForgotPasswordRequest = {
    email: string;
};

export type GameSimulationResponse = {
    id: number | null;
    game_id: number;
    win_probability: string | null;
    projected_score: string | null;
    sim_overall_summary: string | null;
    sim_success_factors: string | null;
    sim_key_matchups: string | null;
    sim_win_loss_patterns: string | null;
    sim_critical_advantage: string | null;
    sim_keys_to_victory: Array<string>;
    sim_situational_adjustments: Array<SituationalAdjustment>;
    playbook_offensive_plays: Array<PlaybookPlay>;
    playbook_defensive_plays: Array<PlaybookPlay>;
    playbook_special_situations: Array<PlaybookPlay>;
    playbook_inbound_plays: Array<PlaybookPlay>;
    playbook_after_timeout_special_plays: Array<PlaybookPlay>;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type LatestTeamAnalysis = {
    analysis_date: string;
    team_name: string;
    team_uuid: string;
};

export type MessageResponse = {
    detail: string;
};

export type OverallReport = {
    created_at: string;
    game_uuid: string;
    game_simulation: GameSimulationResponse;
    team: TeamResponse;
    team_stats: TeamStatsResponse;
    team_analysis: TeamAnalysisResponse;
    team_player_analysis: Array<PlayerProjectionResponse>;
    opponent: TeamResponse;
    opponent_stats: TeamStatsResponse;
    opponent_analysis: TeamAnalysisResponse;
    opponent_player_analysis: Array<PlayerProjectionResponse>;
};

export type PlaybookPlay = {
    play_name: string;
    purpose: string;
    execution: string;
    counter: string;
};

export type PlayerProjectionResponse = {
    name: string;
    number: number;
    is_home_team: boolean;
    ppg: number;
    rpg: number;
    apg: number;
    fg_pct: string;
    fg3_pct: string;
    role: string;
    strengths: Array<string>;
    weaknesses: Array<string>;
    actual_ppg: number;
    actual_rpg: number;
    actual_apg: number;
    actual_fg_pct: string;
    actual_fg3_pct: string;
    actual_ft_pct: string;
    actual_spg: number;
    actual_bpg: number;
    actual_topg: number;
    actual_minutes: number;
};

export type ProcessingTaskResponse = {
    task_uuid: string;
    status: 'processing' | 'completed' | 'failed';
    step_description: string;
    current_step: number;
    total_steps: number;
    game_uuid?: string | null;
};

export type ReportSummary = {
    game_uuid: string;
    home_team_id: number;
    away_team_id: number;
    home_team: string;
    away_team: string;
    created_at: string;
};

export type ResetPasswordRequest = {
    email: string;
    otp: string;
    new_password: string;
    confirm_password: string;
};

export type SituationalAdjustment = {
    scenario: string;
    adjustment: string;
    outcome: string;
};

export type TeamAnalysisResponse = {
    playing_style: string;
    strengths: Array<string>;
    weaknesses: Array<string>;
    key_players: Array<string>;
    offensive_keys: Array<string>;
    defensive_keys: Array<string>;
    game_factors: Array<string>;
    rotation_plan: Array<string>;
    situational_adjustments: Array<string>;
    game_keys: Array<string>;
};

export type TeamResponse = {
    name: string;
    record: string;
    ranking: string;
};

export type TeamStatsResponse = {
    ppg: number | null;
    fg_pct: string | null;
    fg_made: number | null;
    fg_attempted: number | null;
    fg3_pct: string | null;
    fg3_made: number | null;
    fg3_attempted: number | null;
    ft_pct: string | null;
    ft_made: number | null;
    ft_attempted: number | null;
    rebounds: number | null;
    offensive_rebounds: number | null;
    defensive_rebounds: number | null;
    assists: number | null;
    steals: number | null;
    blocks: number | null;
    turnovers: number | null;
    assist_to_turnover: number | null;
    is_season_average: boolean | null;
};

export type TokenResponse = {
    access_token: string;
    token_type?: string;
    expires_at: string;
};

export type UploadProcessResponse = {
    task_id: string;
    status: 'processing' | 'completed' | 'failed';
};

export type UserBase = {
    email: string;
    name: string;
    phone_number: string;
    school: string;
    role: string;
};

export type UserConfirm = {
    email: string;
    code: string;
};

export type UserCreate = {
    email: string;
    name: string;
    phone_number: string;
    school: string;
    role: string;
    password: string;
    confirm_password: string;
};

export type UserLogin = {
    email: string;
    password: string;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type GetAnalysesApiTaskAnalysesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/task/analyses';
};

export type GetAnalysesApiTaskAnalysesGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAnalysesApiTaskAnalysesGetError = GetAnalysesApiTaskAnalysesGetErrors[keyof GetAnalysesApiTaskAnalysesGetErrors];

export type GetAnalysesApiTaskAnalysesGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UploadFilesApiTaskUploadPostData = {
    body: BodyUploadFilesApiTaskUploadPost;
    path?: never;
    query?: never;
    url: '/api/task/upload';
};

export type UploadFilesApiTaskUploadPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadFilesApiTaskUploadPostError = UploadFilesApiTaskUploadPostErrors[keyof UploadFilesApiTaskUploadPostErrors];

export type UploadFilesApiTaskUploadPostResponses = {
    /**
     * Successful Response
     */
    200: UploadProcessResponse;
};

export type UploadFilesApiTaskUploadPostResponse = UploadFilesApiTaskUploadPostResponses[keyof UploadFilesApiTaskUploadPostResponses];

export type GetStatusApiTaskStatusTaskIdGetData = {
    body?: never;
    path: {
        task_id: string;
    };
    query?: never;
    url: '/api/task/status/{task_id}';
};

export type GetStatusApiTaskStatusTaskIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetStatusApiTaskStatusTaskIdGetError = GetStatusApiTaskStatusTaskIdGetErrors[keyof GetStatusApiTaskStatusTaskIdGetErrors];

export type GetStatusApiTaskStatusTaskIdGetResponses = {
    /**
     * Successful Response
     */
    200: ProcessingTaskResponse;
};

export type GetStatusApiTaskStatusTaskIdGetResponse = GetStatusApiTaskStatusTaskIdGetResponses[keyof GetStatusApiTaskStatusTaskIdGetResponses];

export type DownloadReportApiTaskDownloadTaskIdGetData = {
    body?: never;
    path: {
        task_id: string;
    };
    query?: never;
    url: '/api/task/download/{task_id}';
};

export type DownloadReportApiTaskDownloadTaskIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DownloadReportApiTaskDownloadTaskIdGetError = DownloadReportApiTaskDownloadTaskIdGetErrors[keyof DownloadReportApiTaskDownloadTaskIdGetErrors];

export type DownloadReportApiTaskDownloadTaskIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DownloadTeamAnalysisApiTaskDownloadTeamAnalysisTaskIdGetData = {
    body?: never;
    path: {
        task_id: string;
    };
    query?: never;
    url: '/api/task/download-team-analysis/{task_id}';
};

export type DownloadTeamAnalysisApiTaskDownloadTeamAnalysisTaskIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DownloadTeamAnalysisApiTaskDownloadTeamAnalysisTaskIdGetError = DownloadTeamAnalysisApiTaskDownloadTeamAnalysisTaskIdGetErrors[keyof DownloadTeamAnalysisApiTaskDownloadTeamAnalysisTaskIdGetErrors];

export type DownloadTeamAnalysisApiTaskDownloadTeamAnalysisTaskIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DownloadOpponentAnalysisApiTaskDownloadOpponentAnalysisTaskIdGetData = {
    body?: never;
    path: {
        task_id: string;
    };
    query?: never;
    url: '/api/task/download-opponent-analysis/{task_id}';
};

export type DownloadOpponentAnalysisApiTaskDownloadOpponentAnalysisTaskIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DownloadOpponentAnalysisApiTaskDownloadOpponentAnalysisTaskIdGetError = DownloadOpponentAnalysisApiTaskDownloadOpponentAnalysisTaskIdGetErrors[keyof DownloadOpponentAnalysisApiTaskDownloadOpponentAnalysisTaskIdGetErrors];

export type DownloadOpponentAnalysisApiTaskDownloadOpponentAnalysisTaskIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DownloadByPathApiTaskDownloadByPathGetData = {
    body?: never;
    path?: never;
    query: {
        path: string;
    };
    url: '/api/task/download-by-path';
};

export type DownloadByPathApiTaskDownloadByPathGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DownloadByPathApiTaskDownloadByPathGetError = DownloadByPathApiTaskDownloadByPathGetErrors[keyof DownloadByPathApiTaskDownloadByPathGetErrors];

export type DownloadByPathApiTaskDownloadByPathGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LoginUserApiAuthLoginPostData = {
    body: UserLogin;
    path?: never;
    query?: never;
    url: '/api/auth/login';
};

export type LoginUserApiAuthLoginPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginUserApiAuthLoginPostError = LoginUserApiAuthLoginPostErrors[keyof LoginUserApiAuthLoginPostErrors];

export type LoginUserApiAuthLoginPostResponses = {
    /**
     * Successful Response
     */
    200: TokenResponse;
};

export type LoginUserApiAuthLoginPostResponse = LoginUserApiAuthLoginPostResponses[keyof LoginUserApiAuthLoginPostResponses];

export type ConfirmEmailApiAuthConfirmEmailPostData = {
    body: UserConfirm;
    path?: never;
    query?: never;
    url: '/api/auth/confirm-email';
};

export type ConfirmEmailApiAuthConfirmEmailPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ConfirmEmailApiAuthConfirmEmailPostError = ConfirmEmailApiAuthConfirmEmailPostErrors[keyof ConfirmEmailApiAuthConfirmEmailPostErrors];

export type ConfirmEmailApiAuthConfirmEmailPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LogoutUserApiAuthLogoutGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/logout';
};

export type LogoutUserApiAuthLogoutGetErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type LogoutUserApiAuthLogoutGetResponses = {
    /**
     * Successful Response
     */
    200: MessageResponse;
};

export type LogoutUserApiAuthLogoutGetResponse = LogoutUserApiAuthLogoutGetResponses[keyof LogoutUserApiAuthLogoutGetResponses];

export type RegisterUserApiAuthRegisterPostData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/api/auth/register';
};

export type RegisterUserApiAuthRegisterPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterUserApiAuthRegisterPostError = RegisterUserApiAuthRegisterPostErrors[keyof RegisterUserApiAuthRegisterPostErrors];

export type RegisterUserApiAuthRegisterPostResponses = {
    /**
     * Successful Response
     */
    200: MessageResponse;
};

export type RegisterUserApiAuthRegisterPostResponse = RegisterUserApiAuthRegisterPostResponses[keyof RegisterUserApiAuthRegisterPostResponses];

export type ForgotPasswordApiAuthForgotPasswordPostData = {
    body: ForgotPasswordRequest;
    path?: never;
    query?: never;
    url: '/api/auth/forgot-password';
};

export type ForgotPasswordApiAuthForgotPasswordPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ForgotPasswordApiAuthForgotPasswordPostError = ForgotPasswordApiAuthForgotPasswordPostErrors[keyof ForgotPasswordApiAuthForgotPasswordPostErrors];

export type ForgotPasswordApiAuthForgotPasswordPostResponses = {
    /**
     * Successful Response
     */
    200: MessageResponse;
};

export type ForgotPasswordApiAuthForgotPasswordPostResponse = ForgotPasswordApiAuthForgotPasswordPostResponses[keyof ForgotPasswordApiAuthForgotPasswordPostResponses];

export type ResetPasswordApiAuthResetPasswordPostData = {
    body: ResetPasswordRequest;
    path?: never;
    query?: never;
    url: '/api/auth/reset-password';
};

export type ResetPasswordApiAuthResetPasswordPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ResetPasswordApiAuthResetPasswordPostError = ResetPasswordApiAuthResetPasswordPostErrors[keyof ResetPasswordApiAuthResetPasswordPostErrors];

export type ResetPasswordApiAuthResetPasswordPostResponses = {
    /**
     * Successful Response
     */
    200: MessageResponse;
};

export type ResetPasswordApiAuthResetPasswordPostResponse = ResetPasswordApiAuthResetPasswordPostResponses[keyof ResetPasswordApiAuthResetPasswordPostResponses];

export type GetMeApiAuthMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/me';
};

export type GetMeApiAuthMeGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMeApiAuthMeGetError = GetMeApiAuthMeGetErrors[keyof GetMeApiAuthMeGetErrors];

export type GetMeApiAuthMeGetResponses = {
    /**
     * Successful Response
     */
    200: UserBase;
};

export type GetMeApiAuthMeGetResponse = GetMeApiAuthMeGetResponses[keyof GetMeApiAuthMeGetResponses];

export type GetReportSummariesApiReportSummariesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/report/summaries';
};

export type GetReportSummariesApiReportSummariesGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetReportSummariesApiReportSummariesGetError = GetReportSummariesApiReportSummariesGetErrors[keyof GetReportSummariesApiReportSummariesGetErrors];

export type GetReportSummariesApiReportSummariesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ReportSummary>;
};

export type GetReportSummariesApiReportSummariesGetResponse = GetReportSummariesApiReportSummariesGetResponses[keyof GetReportSummariesApiReportSummariesGetResponses];

export type GetFullGameReportApiReportGameUuidGetData = {
    body?: never;
    path: {
        game_uuid: string;
    };
    query?: never;
    url: '/api/report/{game_uuid}';
};

export type GetFullGameReportApiReportGameUuidGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFullGameReportApiReportGameUuidGetError = GetFullGameReportApiReportGameUuidGetErrors[keyof GetFullGameReportApiReportGameUuidGetErrors];

export type GetFullGameReportApiReportGameUuidGetResponses = {
    /**
     * Successful Response
     */
    200: OverallReport;
};

export type GetFullGameReportApiReportGameUuidGetResponse = GetFullGameReportApiReportGameUuidGetResponses[keyof GetFullGameReportApiReportGameUuidGetResponses];

export type DownloadGameReportApiReportGameUuidDownloadGetData = {
    body?: never;
    path: {
        game_uuid: string;
    };
    query?: never;
    url: '/api/report/{game_uuid}/download';
};

export type DownloadGameReportApiReportGameUuidDownloadGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DownloadGameReportApiReportGameUuidDownloadGetError = DownloadGameReportApiReportGameUuidDownloadGetErrors[keyof DownloadGameReportApiReportGameUuidDownloadGetErrors];

export type DownloadGameReportApiReportGameUuidDownloadGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetLatestHomeTeamAnalysisApiTeamLatestHomeTeamAnalysisGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/team/latest-home-team-analysis';
};

export type GetLatestHomeTeamAnalysisApiTeamLatestHomeTeamAnalysisGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetLatestHomeTeamAnalysisApiTeamLatestHomeTeamAnalysisGetError = GetLatestHomeTeamAnalysisApiTeamLatestHomeTeamAnalysisGetErrors[keyof GetLatestHomeTeamAnalysisApiTeamLatestHomeTeamAnalysisGetErrors];

export type GetLatestHomeTeamAnalysisApiTeamLatestHomeTeamAnalysisGetResponses = {
    /**
     * Successful Response
     */
    200: LatestTeamAnalysis;
};

export type GetLatestHomeTeamAnalysisApiTeamLatestHomeTeamAnalysisGetResponse = GetLatestHomeTeamAnalysisApiTeamLatestHomeTeamAnalysisGetResponses[keyof GetLatestHomeTeamAnalysisApiTeamLatestHomeTeamAnalysisGetResponses];

export type MaintenancePageMaintenanceGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/maintenance';
};

export type MaintenancePageMaintenanceGetResponses = {
    /**
     * Successful Response
     */
    200: string;
};

export type MaintenancePageMaintenanceGetResponse = MaintenancePageMaintenanceGetResponses[keyof MaintenancePageMaintenanceGetResponses];

export type AnalysesPageAnalysesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/analyses';
};

export type AnalysesPageAnalysesGetResponses = {
    /**
     * Successful Response
     */
    200: string;
};

export type AnalysesPageAnalysesGetResponse = AnalysesPageAnalysesGetResponses[keyof AnalysesPageAnalysesGetResponses];

export type ReadRootPathGetData = {
    body?: never;
    path: {
        path: string;
    };
    query?: never;
    url: '/{path}';
};

export type ReadRootPathGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadRootPathGetError = ReadRootPathGetErrors[keyof ReadRootPathGetErrors];

export type ReadRootPathGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};